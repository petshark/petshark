version: '3.1'

services:
  ###########
  # BACKEND #
  ###########
  backend:
    build:
      context: ./
      dockerfile: ./docker/backend/dev.Dockerfile
    depends_on:
      - database
    volumes:
      - ./backend:/petshark # bind-mount source code
      - mvn_cache:/root/.m2 # maven cache for root
      - mvn_cache:/home/backend/.m2 # maven cache for non-root
    ports:
      - ${DC_BACKEND_TOMCAT_PORT}:8080
      - ${DC_BACKEND_DEBUG_PORT}:5005
    environment:
      # Change uid and gid of non-root user (useful when working with bind-mounts)
      BACKEND_UID: ${BACKEND_UID}
      BACKEND_GID: ${BACKEND_GID}
      # See application.properties for details
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432 # internal docker port
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_USER_PASSWORD: ${DB_USER_PASSWORD}
      # API/Login-form auth credentials
      BACKEND_USER_USERNAME: ${BACKEND_USER_USERNAME}
      BACKEND_USER_PASSWORD: ${BACKEND_USER_PASSWORD}
      BACKEND_ADMIN_USERNAME: ${BACKEND_ADMIN_USERNAME} 
      BACKEND_ADMIN_PASSWORD: ${BACKEND_ADMIN_PASSWORD}
      # Backend and frontend URL
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
  ##########
  # PYTHON #
  ##########
  python:
    build:
      context: ./
      dockerfile: ./docker/python/dev.Dockerfile
    volumes:
      - ./python:/python # bind-mount source code
      - pip_cache:/root/.cache/pip # pip cache for root
      - pip_cache:/home/python/.cache/pip # pip cache for non-root
    ports:
      - ${DC_PYTHON_PORT}:6000
    environment:
      # Change uid and gid of non-root user (useful when working with bind-mounts)
      PYTHON_UID: ${PYTHON_UID}
      PYTHON_GID: ${PYTHON_GID}
      # database config
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432 # internal postgres port
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_USER_PASSWORD: ${DB_USER_PASSWORD}
      # java auth credentials
      BACKEND_USER_USERNAME: ${BACKEND_USER_USERNAME}
      BACKEND_USER_PASSWORD: ${BACKEND_USER_PASSWORD}
      BACKEND_ADMIN_USERNAME: ${BACKEND_ADMIN_USERNAME}
      BACKEND_ADMIN_PASSWORD: ${BACKEND_ADMIN_PASSWORD}
  ############
  # FRONTEND #
  ############
  frontend:
    build:
      context: ./
      dockerfile: ./docker/frontend/dev.Dockerfile
    volumes:
      - ./frontend:/petshark # bind-mount source code
      - npm_cache:/home/node/.npm # npm cache for non-root
    ports:
      - ${DC_FRONTEND_PORT}:5000
    environment:
      # Change uid and gid of non-root user (useful when working with bind-mounts)
      FRONTEND_UID: ${FRONTEND_UID}
      FRONTEND_GID: ${FRONTEND_GID}
      # API auth credentials
      BACKEND_USER_USERNAME: ${BACKEND_USER_USERNAME}
      BACKEND_USER_PASSWORD: ${BACKEND_USER_PASSWORD}
      BACKEND_ADMIN_USERNAME: ${BACKEND_ADMIN_USERNAME} 
      BACKEND_ADMIN_PASSWORD: ${BACKEND_ADMIN_PASSWORD}
      # Backend and frontend URL
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
      # TODO: pass on backend endpoint
  ############
  # DATABASE #
  ############
  database:
    build:
      context: ./
      dockerfile: ./docker/database/Dockerfile
    volumes:
      - db_data:/postgres-data
    ports:
      - ${DC_POSTGRES_PORT}:5432
    environment:
      # See Dockerfile for details
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_USER_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
  ###########
  # ADMINER #
  ###########
  adminer:
    build:
      context: ./
      dockerfile: ./docker/adminer/Dockerfile
    depends_on:
      - database
    ports:
      - ${DC_ADMINER_PORT}:8080
    environment:
      # See Dockerfile for details
      ADMINER_AUTOLOGIN: 'true'
      ADMINER_DB_SERVER: ${DB_HOST}
      ADMINER_DB_NAME: ${DB_NAME}
      ADMINER_DB_USER: ${DB_USER}
      ADMINER_DB_PASSWORD: ${DB_USER_PASSWORD}
volumes:
  db_data:
  mvn_cache:
  pip_cache:
  npm_cache:
