# this docker-compose.yml runs on Digital Ocean
version: '3.1'

services:
  ##########
  # APACHE #
  ##########
  apache:
    build:
      context: ./
      dockerfile: ./docker/apache/Dockerfile
    volumes:
      - apache_certs:/usr/local/apache2/md
      - apache_logs:/usr/local/apache2/logs
    ports:
      - 80:80
      - 443:443
    environment:
      APACHE_DOMAIN: ${APACHE_DOMAIN}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      APACHE_LOG_DIR: /usr/local/apache2/logs
  ###########
  # BACKEND #
  ###########
  backend:
    build:
      context: ./
      dockerfile: ./docker/backend/prod.Dockerfile
      args:
        JAR_NAME: demo-0.0.1-SNAPSHOT.jar
    depends_on:
      - database
    volumes:
      - mvn_cache:/root/.m2 # maven cache for root
      - mvn_cache:/home/backend/.m2 # maven cache for non-root
    ports:
      - ${DC_BACKEND_TOMCAT_PORT}:8080
      - ${DC_BACKEND_DEBUG_PORT}:5005 # block port in firewall
    environment:
      # See application.properties for details
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432 # internal postgres port
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_USER_PASSWORD: ${DB_USER_PASSWORD}
      # API/Login-form auth credentials
      # TODO replace with non-hardcoded values
      BACKEND_USER_USERNAME: user
      BACKEND_USER_PASSWORD: user
      BACKEND_ADMIN_USERNAME: admin
      BACKEND_ADMIN_PASSWORD: admin
      # Backend and frontend URL
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      PYTHON_BASE_URL: ${PYTHON_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
  ##########
  # PYTHON #
  ##########
  python:
    build:
      context: ./
      dockerfile: ./docker/python/prod.Dockerfile
    volumes:
      - pip_cache:/root/.cache/pip # pip cache for root
      - pip_cache:/home/python/.cache/pip # pip cache for non-root
    ports:
      - ${DC_PYTHON_PORT}:7000
    environment:
      # database config
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432 # internal postgres port
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_USER_PASSWORD: ${DB_USER_PASSWORD}
      # java auth credentials
      # TODO replace with non-hardcoded values
      BACKEND_USER_USERNAME: user
      BACKEND_USER_PASSWORD: user
      BACKEND_ADMIN_USERNAME: admin
      BACKEND_ADMIN_PASSWORD: admin
      # Backend and frontend URL
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      PYTHON_BASE_URL: ${PYTHON_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
  ############
  # FRONTEND #
  ############
  frontend:
    build:
      context: ./
      dockerfile: ./docker/frontend/prod.Dockerfile
    volumes:
      # NOTE: make sure user is non-root during build
      - npm_cache:/home/node/.npm # npm cache for non-root
    ports:
      - ${DC_FRONTEND_PORT}:5000
    environment:
      # API auth credentials
      # TODO replace with non-hardcoded values
      BACKEND_USER_USERNAME: user
      BACKEND_USER_PASSWORD: user
      BACKEND_ADMIN_USERNAME: admin
      BACKEND_ADMIN_PASSWORD: admin
      # Backend and frontend URL
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      PYTHON_BASE_URL: ${PYTHON_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
  ############
  # DATABASE #
  ############
  database:
    build:
      context: ./
      dockerfile: ./docker/database/Dockerfile
    volumes:
      - db_data:/postgres-data
    ports:
      - ${DC_POSTGRES_PORT}:5432
    environment:
      # See Dockerfile for details
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_USER_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
  ###########
  # ADMINER #
  ###########
  adminer:
    build:
      context: ./
      dockerfile: ./docker/adminer/Dockerfile
    depends_on:
      - database
    ports:
      - ${DC_ADMINER_PORT}:8080
    environment:
      # See Dockerfile for details
      ADMINER_PLUGINS: auto-login-deploy
      ADMINER_DB_SERVER: ${DB_HOST}
      ADMINER_DB_NAME: ${DB_NAME}
      ADMINER_DB_USER: ${DB_USER}
      ADMINER_DB_PASSWORD: ${DB_USER_PASSWORD}
volumes:
  apache_certs:
  apache_logs:
  mvn_cache:
  pip_cache:
  npm_cache:
  db_data:
